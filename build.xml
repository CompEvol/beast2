<!-- Build BEAST 2. It is also used by Hudson BEAST_2 project. JUnit test is available for this build. -->
<project basedir="." default="build_jar_all_BEAST" name="BUILD_BEAST_2" 
	xmlns:fx="javafx:com.sun.javafx.tools.ant">
    <description>
        Build BEAST 2.
        Also used by Hudson BEAST_2 project.
        JUnit test is available for this build.
        $Id: build_BEAST_2.xml $
    </description>

    <!-- set global properties for this build -->
    <property name="beast2" location="../beast2.7"/>
    <property name="src" location="${beast2}/src"/>
    <property name="build" location="${beast2}/build" />
    <property name="lib" location="${beast2}/lib" />
    <property name="doc" location="${beast2}/doc" />
    <property name="dist" location="${beast2}/build/dist" />
    <property name="test" location="${beast2}/test" />

    <property name="main_class_BEASTLauncher" value="beast.app.util.BeastLauncher" />
    <property name="report" value="build/junitreport" />

    <path id="classpath">
        <fileset dir="${lib}" includes="beagle.jar"/>
        <fileset dir="${lib}" includes="colt.jar"/>
        <fileset dir="${lib}" includes="antlr-runtime-4.10.1.jar"/>
        <fileset dir="${lib}" includes="commons-math3-3.6.1.jar" />
        <fileset dir="${lib}/junit" includes="junit-platform-console-standalone-1.8.2.jar"/>
        <path location="build"/>
    </path>


    <!-- start -->
    <target name="init">
        <echo message="${ant.project.name}: ${ant.file}" />
        <available file="${beast2}/version.xml" property="versionAvailable"/>
        <fail unless="versionAvailable">
              ** Required file version.xml does not exist. **
        </fail>

        <!-- Read package name and version from xml file -->
        <xmlproperty file="${beast2}/version.xml" prefix="fromVersionFile" />
        <property name="version" value="${fromVersionFile.package(version)}" />
        <echo message="Version: ${version}" />
    </target>
    

    <target name="clean">
        <delete dir="${build}" />
    </target>

    <!-- clean previous build, and then compile Java source code, and Juint test -->
    <target name="build_all_BEAST" depends="clean,compile-all,junit" description="Clean and Build all run-time stuff">
    </target>

    <!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar -->
    <target name="build_jar_all_BEAST"
            depends="clean,compile-all,junit,dist_all_BEAST"
            description="Clean and Build all run-time stuff">
    </target>


    <!-- No JUnit Test, clean previous build, compile Java source code, and make the beast.jar -->
    <target name="build_jar_all_BEAST_NoJUnitTest"
            depends="clean,compile-all,dist_all_BEAST"
            description="Clean and Build all run-time stuff">
    </target>

    <!-- compile Java source code -->
    <target name="compile-all" depends="init,beast.pkgmgmt,beast.base,test.beast">
        <echo>Building BEAST 2</echo>
        <!--
        <mkdir dir="${build}" />

        <javac source="1.8"
		target="1.8"
		bootclasspath='/opt/jdk1.8.0_131/jre/lib/rt.jar'
               srcdir="${src}"
               destdir="${build}"
               classpathref="classpath"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="1024m"
               includeAntRuntime='false'>
            <include name="beast/**/**" />
            <include name="org/**/**" />
            <include name="test/beast/**" />
        </javac>

        <echo message="Ant running on Java version ${ant.java.version}"/>

        <delete file="${build}/beast/app/beauti/BeautiLauncher.class" />
        <delete file="${build}/beast/app/tools/AppLauncherLauncher.class" />
        <delete file="${build}/beast/app/tools/LogCombinerLauncher.class" />
        <delete file="${build}/beast/app/treeannotator/TreeAnnotatorLauncher.class" />
        <delete file="${build}/beast/app/util/Utils6.class" />
        <delete file="${build}/beast/app/BEASTVersion.class" />
        <delete file="${build}/beast/util/BEASTClassLoader.class" />
    	
        <delete file="${build}/beast/app/util/Version.class" />
        <javac source="1.6"
               target="1.6"
               bootclasspath='/opt/jdk1.6.0_45/jre/lib/rt.jar'
               srcdir="${src}"
               destdir="${build}"
               classpathref="classpath"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="1024m"
               includeAntRuntime='false'>
            <include name="beast/**/*Launcher.java" />
            <include name="beast/**/Utils6.java" />
            <include name="beast/**/BEASTVersion.java" />
            <include name="beast/**/Version.java" />
            <include name="beast/util/Package*.java" />
            <include name="beast/app/util/Arguments.java" />
            <include name="beast/core/util/Log.java" />
	    <include name="beast/util/BEASTClassLoader.java" />
        </javac>
        <copy todir="${build}">
            <fileset dir="${src}" includes="**/*.properties" />
            <fileset dir="${src}" includes="**/*.png" />
        </copy>
        -->
        <echo message="Successfully compiled." />
    </target>

    <target name="beast.pkgmgmt" depends="init">
    
        <mkdir dir="${build}" />
    
    	<javac 
               srcdir="${beast2}/src"
               destdir="${build}"
               classpathref="classpath"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="1024m"
               includeAntRuntime='false'>
            <include name="beast/pkgmgmt/**/**" />
        </javac>
                
        <jar jarfile="${build}/dist/launcher.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
            </manifest>
            
            
			<!--
			   ice type="beast.pkgmgmt.NameSpaceInfo">
				<provider classname="beast.pkgmgmt.NameSpaceInfo"/>
			</service>
			-->
            	
            <fileset dir="${build}">
                <include name="beast/pkgmgmt/**/*.class" />
                <include name="beast/pkgmgmt/**/*.properties" />
                <include name="beast/pkgmgmt/**/*.png" />
            </fileset>
        </jar>
        
        
        <jar jarfile="${dist}/launcher.src.jar">
            <fileset dir="${beast2}/src">
                <include name="beast/pkgmgmt/**/*.java" />
            </fileset>
        </jar>

    </target>


    <target name="beast.base" depends="init">
    	<javac 
               srcdir="${beast2}/src"
               destdir="${build}"
               classpathref="classpath"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="1024m"
               includeAntRuntime='false'>
            <include name="beast/base/**/**" />
            <include name="org/**/**" />
        </javac>
                
        <jar jarfile="${build}/dist/BEAST.base.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
            </manifest>

            <fileset dir="${build}">
                <include name="org/**/*.class" />
                <include name="beast/base/**/*.class" />
                <include name="beast/base/**/*.properties" />
                <include name="beast/base/**/*.png" />
            </fileset>
            <zipgroupfileset dir="${lib}" includes="beagle.jar" />
            <zipgroupfileset dir="${lib}" includes="colt.jar" />
            <zipgroupfileset dir="${lib}" includes="antlr-runtime-4.10.1.jar"/>
	        <zipgroupfileset dir="${lib}" includes="commons-math3-3.6.1.jar" />
        </jar>

        <jar jarfile="${dist}/BEAST.base.src.jar">
            <fileset dir="${beast2}/src">
                <include name="beast/base/**/*.java" />
                <include name="org/**/*.java" />
            </fileset>
        </jar>
    </target>



    <target name="test.beast" depends="init">
    	<javac 
               srcdir="${beast2}/test"
               destdir="${build}"
               classpathref="classpath"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="1024m"
               includeAntRuntime='false'>
            <include name="test/**/**" />
        </javac>
                
        <jar jarfile="${build}/dist/test.beast.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
            </manifest>
            <fileset dir="${build}">
                <include name="test/**/*.class" />
                <include name="test/**/*.properties" />
                <include name="test/**/*.png" />
            </fileset>
        </jar>

        <jar jarfile="${dist}/beast.test.src.jar">
            <fileset dir="${beast2}/src">
                <include name="test/**/*.java" />
            </fileset>
        </jar>
    </target>    
    
    

    
    
    <!-- make the beast.jar -->
    <target name="dist_all_BEAST" depends="compile-all" description="create BEAST jar">

        <!-- create BEAST.base package -->
        <mkdir dir="${release_dir}/package/beast.base/" />
        <mkdir dir="${release_dir}/package/beast.base/lib" />
        <copy file="${dist}/BEAST.base.src.jar" todir="${release_dir}/package/beast.base/"/>
        <copy file="${dist}/BEAST.base.jar" todir="${release_dir}/package/beast.base/lib/"/>
        <copy file="${beast2}/version.xml" todir="${release_dir}/package/beast.base/"/>

        <jar jarfile="${release_dir}/package/BEAST.base.package.v${version}.zip">
            <fileset dir="${release_dir}/package/beast.base">
                <include name="version.xml" />
                <include name="lib/BEAST.base.jar" />
                <include name="BEAST.base.src.jar" />
            </fileset>
            <fileset dir="${beast2}/beast.base/">
                <include name="templates/*.xml" />
                <include name="examples/*.*" />
                <include name="examples/nexus/*.*" />
            </fileset>
         </jar>
	</target>
	

    <!-- run beast.jar -->
    <target name="run_BEAST">
        <java jar="${dist}/beast.jar" fork="true" />
    </target>

    <!-- JUnit test -->
  <target name="junit" depends="junit-unit, junit-integration, junit-xmlparsertest"/>

    <target name="junit-unit">
        <pathconvert property="classpathProp" refid="classpath"/>
        <echo>Classpath is ${classpathProp}</echo>

        <java classpathref="classpath" classname="org.junit.platform.console.ConsoleLauncher" fork="true" failonerror="true">
            <arg line="-p test.beast.base"/>
            <arg line="-p test.beast.core"/>
            <arg line="-p test.beast.evolution"/>
            <arg line="-p test.beast.math"/>
            <arg line="-p test.beast.statistic"/>
            <arg line="-p test.beast.util"/>
            <arg line="-N test.beast.util.XMLParserTest"/>
            <arg line="--reports-dir build/junitreport"/>
        </java>
        <junitreport todir="build/junitreport">
            <fileset dir="build/junitreport">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="build/junitreport"/>
        </junitreport>
    </target>
	
	<!-- separate out test.beast.util.XMLParserTest so the version.xml files get loaded -->
    <target name="junit-xmlparsertest">
        <java classpathref="classpath" classname="org.junit.platform.console.ConsoleLauncher" fork="true" failonerror="true">
            <arg line="-c test.beast.util.XMLParserTest"/>
            <arg line="--reports-dir build/xmlparserreport"/>
        </java>
        <junitreport todir="build/xmlparserreport">
            <fileset dir="build/xmlparserreport">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="build/xmlparserreport"/>
        </junitreport>
    </target>
    
    <target name="junit-integration">
        <java classpathref="classpath" classname="org.junit.platform.console.ConsoleLauncher" fork="true" failonerror="true">
            <arg line="-p test.beast.integration"/>
            <arg line="--reports-dir build/integrationreport"/>
        </java>
        <junitreport todir="build/integrationreport">
            <fileset dir="build/junitreport">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="build/integrationreport"/>
        </junitreport>
    </target>

    <target name="junitreport">
        <junitreport todir="${report}">
            <fileset dir="${report}" includes="*.xml" />
            <report format="frames" todir="${report}" />
        </junitreport>
        <echo message="JUnit test report finished." />
    </target>
    
    <!-- Target for Travis-CI with non-zero exit status on test failure. -->
    <target name="travis" depends="clean, compile-all, junit, junitb">
        <fail if="junitfailed" message="One or more CORE BEAST tests failed."/>
        <fail if="junitbfailed" message="One or more BEAUTI tests failed."/>
    </target>

    <!-- testing beauti gui-->
    <target name="junitb">
        <mkdir dir="${report}" />
        <junit printsummary="yes" failureproperty="junitbfailed">
            <!--showoutput='yes'-->
            <classpath>
                <path id="assertj.classpath">
			        <fileset dir="${lib}" includes="junit-4.8.2.jar"/>
        			<fileset dir="${lib}" includes="beagle.jar"/>
			        <fileset dir="${lib}" includes="colt.jar"/>
			        <fileset dir="${lib}" includes="antlr-runtime-4.10.1.jar"/>
			        <fileset dir="build/dist" includes="BEAST.base.jar" />
			        <fileset dir="build/dist" includes="BEAST.app.jar" />
			        <fileset dir="build/dist" includes="launcher.jar" />
			        <fileset dir="build/dist" includes="test.beast.jar" />
                </path>
                <!--
                <path location="${build}" />
                -->
            </classpath>

            <formatter type="xml" />

            <batchtest fork="yes" todir="${report}">
                <fileset dir="beast.app/test">
                    <include name="test/beast/app/beauti/**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <echo message="JUnit test finished." />
    </target>


    <!-- Release -->
    <property name="release_dir" value="release" />
    <property name="copyright" value="Beast 2 development team 2011-2022" />

    <property name="BEAST_name" value="BEAST" />
    <property name="beast_name" value="beast" />
    <property name="BEAUti_name" value="BEAUti" />
    <property name="TreeAnnotator_name" value="TreeAnnotator" />
    <property name="LogCombiner_name" value="LogCombiner" />
    <property name="LogAnalyser_name" value="LogAnalyser" />
    <property name="AppLauncher_name" value="AppLauncher" />

    <property name="common_dir" value="${release_dir}/common" />
    <property name="Mac_dir" value="${release_dir}/Mac" />
    <property name="Linux_dir" value="${release_dir}/Linux" />
    <property name="Windows_dir" value="${release_dir}/Windows" />
    <property name="beast1_dir" value="${common_dir}/beast1" />
    <property name="tools_dir" value="${common_dir}/tools" />

    <property name="Mac_package_dir" value="${Mac_dir}/${BEAST_name}" />
    <property name="Mac_bundle_dir" value="${Mac_package_dir}/${BEAST_name}" />
    <property name="Linux_package_dir" value="${Linux_dir}/${beast_name}" />
    <property name="Windows_package_dir" value="${Windows_dir}/${BEAST_name}" />


    <taskdef name="jsign" classname="net.jsign.JsignTask" classpath="${beast2}/lib/jsign-3.1.jar"/>

    <!-- Need to either install Launch4j under {BEAST workspace}/${release}
                 or install it in the default directory and change the location of launch4j.dir -->
    <!--depends="build_jar_all_BEAST_NoJUnitTest"-->
    <target name="windows"
            description="release Windows version of BEAST, BEAUTI, TreeAnnotator, LogCombiner">

<input message="Keystore password : " addproperty="storepass"><!-- same as UoA password --></input>

        <delete dir="${Windows_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Windows_package_dir}" />

        <property name="launch4j.dir" location="../launch4j" />
        <taskdef name="launch4j"
                 classname="net.sf.launch4j.ant.Launch4jTask"
                 classpath="${launch4j.dir}/launch4j.jar :${launch4j.dir}/lib/xstream.jar" />

        <copy todir="${Windows_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>
        
        <mkdir dir="${Windows_package_dir}/bat" />
        <copy todir="${Windows_package_dir}/bat/">
            <fileset dir="${Windows_dir}/bat">
                <include name="*.bat" />
            </fileset>
        </copy>

        <!--<copy todir="${Windows_package_dir}/native">
            <fileset dir="${common_dir}/native"/>
        </copy>
        <copy todir="${Windows_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>
        <copy todir="${Windows_package_dir}/bin">
            <fileset dir="${Windows_dir}/scripts"/>
        </copy>
        -->
        <copy file="${dist}/launcher.jar" todir="${Windows_package_dir}/lib" />
        <copy file="${dist}/beast.jar" todir="${Windows_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Windows_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Windows_package_dir}/lib"/>
        <copy todir="${Windows_package_dir}/lib">
            <fileset dir="${Windows_dir}/lib"/>
        </copy>-->
        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Windows_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Windows_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Windows_package_dir}" />

        <!-- BEAUTi v?.?.?.exe -->
        <launch4j configFile="${Windows_dir}/BEAUti_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${BEAUti_name}.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}" >
                  <!-- to bunle a JRE, copy the desired JRE to folder ../jre 
                       (so java.exe is in ../jre/bin/) and uncomment following fragment
                       TODO: needs testing
                  <jre>
                      <path>../jre</path>
    			  </jre>
    			  -->
         </launch4j>

<jsign file="${Windows_package_dir}/${BEAUti_name}.exe"
        name="BEAUti"
        url="http://beast2.org"
        keystore="keystore.pfx"
        alias="http://beast2.org"
        storepass="${storepass}"
        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <!-- BEAST v?.?.?.exe -->
        <launch4j configFile="${Windows_dir}/BEAST_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${BEAST_name}.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}" />

<jsign file="${Windows_package_dir}/${BEAST_name}.exe"
        name="BEAST"
        url="http://beast2.org"
        keystore="keystore.pfx"
        alias="http://beast2.org"
        storepass="${storepass}"
        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <!--<launch4j configFile="${Windows_dir}/TreeStat_launch4j.xml"
                              jar="${dist}/beast.jar"
                              outfile="${Windows_package_dir}/${TreeStat_name}.exe"
                              fileVersion="${version}.0"
                              txtFileVersion="${version}"
                              productVersion="${version}.0"
                              txtProductVersion="${version}"/>-->

        <!-- LogAnalyser v?.?.?.exe
            <launch4j configFile="${Windows_dir}/LogAnalyser_launch4j.xml"
                              jar="${dist}/beast.jar"
                              outfile="${Windows_package_dir}/${LogAnalyser_name}v${version}.exe"
                              fileVersion="${version}.0"
                              txtFileVersion="${version}"
                              productVersion="${version}.0"
                              txtProductVersion="${version}"/>      -->

        <launch4j configFile="${Windows_dir}/LogCombiner_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${LogCombiner_name}.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}"/>

<jsign file="${Windows_package_dir}/${LogCombiner_name}.exe"
        name="LogCombiner"
        url="http://beast2.org"
        keystore="keystore.pfx"
        alias="http://beast2.org"
        storepass="${storepass}"
        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <launch4j configFile="${Windows_dir}/TreeAnnotator_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/TreeAnnotator.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}"/>

<jsign file="${Windows_package_dir}/TreeAnnotator.exe"
        name="TreeAnnotator"
        url="http://beast2.org"
        keystore="keystore.pfx"
        alias="http://beast2.org"
        storepass="${storepass}"
        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <launch4j configFile="${tools_dir}/DensiTree_launch4j.xml"
                  jar="${tools_dir}/DensiTree.jar"
                  outfile="${Windows_package_dir}/DensiTree.exe"
                  fileVersion="2.0.0.0"
                  txtFileVersion="2.0.0.0"
                  productVersion="2.0.0.0"
                  txtProductVersion="2.0.0.0" />

<jsign file="${Windows_package_dir}/DensiTree.exe"
        name="DensiTree"
        url="http://beast2.org"
        keystore="keystore.pfx"
        alias="http://beast2.org"
        storepass="${storepass}"
        tsaurl="http://timestamp.comodoca.com/authenticode"/>


        <launch4j configFile="${Windows_dir}/AppLauncher_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/AppLauncher.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}"/>

<jsign file="${Windows_package_dir}/AppLauncher.exe"
        name="AppLauncher"
        url="http://beast2.org"
        keystore="keystore.pfx"
        alias="http://beast2.org"
        storepass="${storepass}"
        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <copy todir="${Windows_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>
        <!--
                <copy file="${beast1_dir}/LogCombiner.exe" todir="${Windows_package_dir}" />
                <copy file="${beast1_dir}/TreeAnnotator.exe" todir="${Windows_package_dir}" />
        -->
        <zip destfile="${Windows_dir}/${BEAST_name}.v${version}.zip">
            <zipfileset dir="${Windows_package_dir}" prefix="${BEAST_name}" />
        </zip>
       <copy file="${Windows_dir}/${BEAST_name}.v${version}.zip" todir="../../tmp/" />

        <echo message="Windows version release is finished." />
    </target>

    <!-- Need to either install Launch4j under {BEAST workspace}/${release}
                 or install it in the default directory and change the location of launch4j.dir -->
    <!--depends="build_jar_all_BEAST_NoJUnitTest"-->
    <target name="windowsjre"
            description="release Windows version of BEAST, BEAUTI, TreeAnnotator, LogCombiner">

<input message="Keystore password : " addproperty="storepass"><!-- same as UoA password --></input>

        <delete dir="${Windows_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Windows_package_dir}" />

        <property name="launch4j.dir" location="../launch4j" />
        <taskdef name="launch4j"
                 classname="net.sf.launch4j.ant.Launch4jTask"
                 classpath="${launch4j.dir}/launch4j.jar :${launch4j.dir}/lib/xstream.jar" />

        <copy todir="${Windows_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>
        <copy todir="${Windows_package_dir}/jre">
            <fileset dir="../jdk8u212-b04-jre" />
        </copy>

        <mkdir dir="${Windows_package_dir}/bat" />
        <copy todir="${Windows_package_dir}/bat/">
            <fileset dir="${Windows_dir}/bat">
                <include name="*.bat" />
            </fileset>
        </copy>
        <!--<copy todir="${Windows_package_dir}/native">
            <fileset dir="${common_dir}/native"/>
        </copy>
        <copy todir="${Windows_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>
        <copy todir="${Windows_package_dir}/bin">
            <fileset dir="${Windows_dir}/scripts"/>
        </copy>
        -->
        <copy file="${dist}/launcher.jar" todir="${Windows_package_dir}/lib" />
        <copy file="${dist}/beast.jar" todir="${Windows_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Windows_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Windows_package_dir}/lib"/>
        <copy todir="${Windows_package_dir}/lib">
            <fileset dir="${Windows_dir}/lib"/>
        </copy>-->
        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Windows_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Windows_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Windows_package_dir}" />

        <!-- BEAUTi v?.?.?.exe -->
        <launch4j configFile="${Windows_dir}/BEAUti_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${BEAUti_name}.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}" >
                  <!-- to bunle a JRE, copy the desired JRE to folder ../jre 
                       (so java.exe is in ../jre/bin/) and uncomment following fragment
                       TODO: needs testing
                  <jre>
                      <path>../jre</path>
    			  </jre>
    			  -->
         </launch4j>

	<jsign file="${Windows_package_dir}/${BEAUti_name}.exe"
        	name="BEAUti"
	        url="http://beast2.org"
	        keystore="keystore.pfx"
	        alias="http://beast2.org"
	        storepass="${storepass}"
	        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <!-- BEAST v?.?.?.exe -->
        <launch4j configFile="${Windows_dir}/BEAST_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${BEAST_name}.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}" />

	<jsign file="${Windows_package_dir}/${BEAST_name}.exe"
        	name="BEAST"
	        url="http://beast2.org"
	        keystore="keystore.pfx"
	        alias="http://beast2.org"
	        storepass="${storepass}"
	        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <!--<launch4j configFile="${Windows_dir}/TreeStat_launch4j.xml"
                              jar="${dist}/beast.jar"
                              outfile="${Windows_package_dir}/${TreeStat_name}.exe"
                              fileVersion="${version}.0"
                              txtFileVersion="${version}"
                              productVersion="${version}.0"
                              txtProductVersion="${version}"/>-->

        <!-- LogAnalyser v?.?.?.exe
            <launch4j configFile="${Windows_dir}/LogAnalyser_launch4j_jre.xml"
                              jar="${dist}/beast.jar"
                              outfile="${Windows_package_dir}/${LogAnalyser_name}v${version}.exe"
                              fileVersion="${version}.0"
                              txtFileVersion="${version}"
                              productVersion="${version}.0"
                              txtProductVersion="${version}"/>      -->

        <launch4j configFile="${Windows_dir}/LogCombiner_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${LogCombiner_name}.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}"/>

	<jsign file="${Windows_package_dir}/${LogCombiner_name}.exe"
        	name="LogCombiner"
	        url="http://beast2.org"
	        keystore="keystore.pfx"
	        alias="http://beast2.org"
	        storepass="${storepass}"
	        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <launch4j configFile="${Windows_dir}/TreeAnnotator_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/TreeAnnotator.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}"/>

	<jsign file="${Windows_package_dir}/TreeAnnotator.exe"
        	name="TreeAnnotator"
	        url="http://beast2.org"
	        keystore="keystore.pfx"
	        alias="http://beast2.org"
	        storepass="${storepass}"
	        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <launch4j configFile="${tools_dir}/DensiTree_launch4j_jre.xml"
                  jar="${tools_dir}/DensiTree.jar"
                  outfile="${Windows_package_dir}/DensiTree.exe"
                  fileVersion="2.0.0.0"
                  txtFileVersion="2.0.0.0"
                  productVersion="2.0.0.0"
                  txtProductVersion="2.0.0.0" />

	<jsign file="${Windows_package_dir}/DensiTree.exe"
        	name="DensiTree"
	        url="http://beast2.org"
	        keystore="keystore.pfx"
	        alias="http://beast2.org"
	        storepass="${storepass}"
	        tsaurl="http://timestamp.comodoca.com/authenticode"/>

        <launch4j configFile="${Windows_dir}/AppLauncher_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/AppLauncher.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}"/>

	<jsign file="${Windows_package_dir}/AppLauncher.exe"
        	name="AppLauncher"
	        url="http://beast2.org"
	        keystore="keystore.pfx"
	        alias="http://beast2.org"
	        storepass="${storepass}"
	        tsaurl="http://timestamp.comodoca.com/authenticode"/>


        <copy todir="${Windows_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>
        <!--
                <copy file="${beast1_dir}/LogCombiner.exe" todir="${Windows_package_dir}" />
                <copy file="${beast1_dir}/TreeAnnotator.exe" todir="${Windows_package_dir}" />
        -->
        <zip destfile="${Windows_dir}/${BEAST_name}_with_JRE.v${version}.zip">
            <zipfileset dir="${Windows_package_dir}" prefix="${BEAST_name}" />
        </zip>
       <copy file="${Windows_dir}/${BEAST_name}_with_JRE.v${version}.zip" todir="../../tmp/" />

        <echo message="Windows version release is finished." />
    </target>


    <target name="linux"
            depends="compile-all,dist_all_BEAST"
            description="release Linux/Unix version of BEAST, BEAUTI, TreeAnnotator, LogCombiner">
        <delete dir="${Linux_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Linux_package_dir}" />

        <copy todir="${Linux_package_dir}/bin">
            <fileset dir="${Linux_dir}/bin" />
        </copy>
        <chmod dir="${Linux_package_dir}/bin" perm="755" includes="**/**" />

        <copy todir="${Linux_package_dir}/examples/">
            <fileset dir="${beast2}/beast.app/examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>

        <copy file="${beast2}/beast.base/version.xml" tofile="${Linux_package_dir}/beast.base.version.xml" />
        <copy file="${beast2}/beast.app/version.xml" tofile="${Linux_package_dir}/beast.app.version.xml" />

        <copy file="${common_dir}/icons/beast.png" todir="${Linux_package_dir}/images" />
        <copy file="${common_dir}/icons/beauti.png" todir="${Linux_package_dir}/images" />
        <!-- <copy file="${common_dir}/icons/utility.png" todir="${Linux_package_dir}/images" />
        -->
        <copy file="${dist}/launcher.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/BEAST.base.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/BEAST.base.src.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/BEAST.app.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/BEAST.app.src.jar" todir="${Linux_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Linux_package_dir}/lib"/>
        <copy todir="${Linux_package_dir}/lib">
            <fileset dir="${Linux_dir}/lib" />
        </copy>-->

        <!--
        <copy file="${beast1_dir}/beast161.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${tools_dir}/treeannotator.jar" todir="${Linux_package_dir}/lib" />
        -->

        <copy file="${tools_dir}/DensiTree.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${tools_dir}/DensiTree.png" todir="${Linux_package_dir}/images" />

        <copy todir="${Linux_package_dir}/templates/">
            <fileset dir="${beast2}/beast.app/templates/" />
        </copy>
        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Linux_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Linux_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Linux_package_dir}" />

        <!-- Only works under Unix or NonStop Kernel (Tandem) -->
        <!-- <chmod dir="${Linux_package_dir}/bin" perm="755" includes="**/**"/>

            <tar destfile="${Linux_dir}/${BEAST_name}v${version}.tgz" compression="gzip">
                    <tarfileset dir="${Linux_package_dir}" prefix="${BEAST_name}v${version}"/>
            </tar>-->
        <!-- [ANT Bug 550] the tar task change the mode of the executables files, have to tar manaully -->
        <echo message="Have to tar manaully, because [ANT Bug 550] the tar task change the mode of the executables files." />
        <!-- tar -cvzf BEASTv1.x.x.tgz BEASTv2.x.x/ -->
        <!-- cksum BEASTv2.x.x.tgz -->
        <!-- tar -xvzf BEASTv2.x.x.tgz -->
        <echo message="Linux/Unix version release is finished." />
        
        <echo message="cd release/Linux"/>
        <echo message="tar fcz BEAST.v${version}.tgz beast"/>
        <echo message="cp BEAST.v${version}.tgz ~/tmp"/>
    </target>

<!--            depends="build_jar_all_BEAST_NoJUnitTest"-->
    <target name="linuxjre"
            description="release Linux/Unix version of BEAST, BEAUTI, TreeAnnotator, LogCombiner">
        <delete dir="${Linux_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Linux_package_dir}" />

        <copy todir="${Linux_package_dir}/bin">
            <fileset dir="${Linux_dir}/jrebin" />
        </copy>
        <chmod dir="${Linux_package_dir}/bin" perm="755" includes="**/**" />
        <exec executable="cp">
             <arg line="-R ../jdk8u282-b08-jre ${Linux_package_dir}/jre1.8.0_282"/>
	</exec>

        <!--<copy todir="${Linux_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>-->
        <copy todir="${Linux_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>

        <copy file="${common_dir}/icons/beast.png" todir="${Linux_package_dir}/images" />
        <copy file="${common_dir}/icons/beauti.png" todir="${Linux_package_dir}/images" />
        <!-- <copy file="${common_dir}/icons/utility.png" todir="${Linux_package_dir}/images" />
        -->
        <copy file="${dist}/launcher.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/beast.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Linux_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Linux_package_dir}/lib"/>
        <copy todir="${Linux_package_dir}/lib">
            <fileset dir="${Linux_dir}/lib" />
        </copy>-->

        <!--
        <copy file="${beast1_dir}/beast161.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${tools_dir}/treeannotator.jar" todir="${Linux_package_dir}/lib" />
        -->

        <copy file="${tools_dir}/DensiTree.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${tools_dir}/DensiTree.png" todir="${Linux_package_dir}/images" />

        <copy todir="${Linux_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>
        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Linux_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Linux_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Linux_package_dir}" />

        <!-- Only works under Unix or NonStop Kernel (Tandem) -->
        <!-- <chmod dir="${Linux_package_dir}/bin" perm="755" includes="**/**"/>

            <tar destfile="${Linux_dir}/${BEAST_name}v${version}.tgz" compression="gzip">
                    <tarfileset dir="${Linux_package_dir}" prefix="${BEAST_name}v${version}"/>
            </tar>-->
        <!-- [ANT Bug 550] the tar task change the mode of the executables files, have to tar manaully -->
        <echo message="Have to tar manaully, because [ANT Bug 550] the tar task change the mode of the executables files." />
        <!-- tar -cvzf BEASTv1.x.x.tgz BEASTv2.x.x/ -->
        <!-- cksum BEASTv2.x.x.tgz -->
        <!-- tar -xvzf BEASTv2.x.x.tgz -->
        <echo message="Linux/Unix version release is finished." />
        
        <echo message="cd release/Linux"/>
        <echo message="tar fcz BEAST.v${version}.tgz beast"/>
        <echo message="cp BEAST.v${version}.tgz ~/tmp"/>
    </target>

    <!-- Define the appbundler task -->
<!--    <taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask" classpath="${beast2}/lib/bundler/appbundler-1.0.jar"/>-->
    <taskdef name="jarbundler" classname="com.ultramixer.jarbundler.JarBundler" classpath="${beast2}/lib/bundler/jarbundler-core-3.3.0.jar"/>

    <!--property name="AppleSigner" value="Developer ID Application: Alexei Drummond (6M6Y6L7RUP)" /-->
    <!--<property name="AppleSigner" value="Developer ID Application: Remco Bouckaert (LHFJWE5U63)" />-->
    <property name="AppleSigner" value="Developer ID Application: Walter Xie (27V5YMX65C)" />

    <property name="jvm_version" value="1.8+"/>

    <!-- Create the app bundle -->
    <target name="bundle">
        <copy file="${dist}/launcher.jar" todir="${Mac_package_dir}/lib" />
        <copy file="${dist}/beast.jar" todir="${Mac_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Mac_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Mac_package_dir}/lib"/>
        <copy todir="${Mac_package_dir}/lib">
            <fileset dir="${Mac_dir}/lib" />
        </copy> -->

        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Mac_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Mac_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Mac_package_dir}" />

        <echo message="Creating BEAST.app ..." />

        <!-- create a jar bundle for the mac -->
        <jarbundler dir="${Mac_package_dir}"
                    name="${BEAST_name}"
                    mainclass="beast.app.beastapp.BeastLauncher"
                    stubfile="${stubfile}"
                    useJavaXKey="true"
                    icon="${common_dir}/icons/beast.icns"
                    jvmversion="${jvm_version}"
                    vmoptions="-Xmx8g -Duser.language=en"
                    arguments="-window -working -options"
                    highresolutioncapable="true"
                    version="${version}"
                    copyright="${BEAST_name}, ${copyright}"
                    bundleid="beast.app.beastapp.BeastMain">
            <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
            <javaproperty name="java.library.path" value="$JAVAROOT:/usr/local/lib"/>
            <jarfileset dir="${Mac_package_dir}/lib">
                <include name="**/launcher.jar"/>
                <!--                <include name="**/beast.jar"/>-->
                <!--                <include name="**/beast-beagle.jar"/>-->
            </jarfileset>

        </jarbundler>

        <echo message="Creating BEAUti.app ..." />

        <jarbundler dir="${Mac_package_dir}"
                    name="${BEAUti_name}"
                    mainclass="beast.app.beauti.BeautiLauncher"
                    stubfile="${stubfile}"
                    useJavaXKey="true"
                    icon="${common_dir}/icons/beauti.icns"
                    jvmversion="${jvm_version}"
                    vmoptions="-Xmx8g -Duser.language=en -Xdock:name=&quot;BEAUti&quot;"
                    arguments="-capture"
                    highresolutioncapable="true"
                    version="${version}"
                    copyright="${BEAUti_name}, ${copyright}"
                    bundleid="beast.app.beauti.Beauti">
            <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
            <javaproperty name="java.library.path" value="$JAVAROOT:/usr/local/lib"/>
            <jarfileset dir="${Mac_package_dir}/lib">
                <include name="**/launcher.jar"/>
            </jarfileset>

        </jarbundler>

        <echo message="Creating LogCombiner.app ..." />

        <jarbundler dir="${Mac_package_dir}"
                    name="${LogCombiner_name}"
                    mainclass="beast.app.tools.LogCombinerLauncher"
                    stubfile="${stubfile}"
                    useJavaXKey="true"
                    icon="${common_dir}/icons/utility.icns"
                    jvmversion="${jvm_version}"
                    vmoptions="-Xmx8g -Duser.language=en"
                    arguments=""
                    highresolutioncapable="true"
                    version="${version}"
                    copyright="${LogCombiner_name}, ${copyright}"
                    bundleid="beast.app.tools.LogCombiner">
            <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
            <javaproperty name="java.library.path" value="$JAVAROOT:/usr/local/lib"/>
            <jarfileset dir="${Mac_package_dir}/lib">
                <include name="**/launcher.jar"/>
            </jarfileset>

        </jarbundler>

        <echo message="Creating TreeAnnotator.app ..." />

        <jarbundler dir="${Mac_package_dir}"
                    name="${TreeAnnotator_name}"
                    mainclass="beast.app.treeannotator.TreeAnnotatorLauncher"
                    stubfile="${stubfile}"
                    useJavaXKey="true"
                    icon="${common_dir}/icons/utility.icns"
                    jvmversion="${jvm_version}"
                    vmoptions="-Xmx8g -Duser.language=en"
                    arguments=""
                    highresolutioncapable="true"
                    version="${version}"
                    copyright="${TreeAnnotator_name}, ${copyright}"
                    bundleid="beast.app.treeannotator.TreeAnnotator">
            <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
            <javaproperty name="java.library.path" value="$JAVAROOT:/usr/local/lib"/>
            <jarfileset dir="${Mac_package_dir}/lib">
                <include name="**/launcher.jar"/>
            </jarfileset>

        </jarbundler>

        <echo message="Creating AppLauncher_name.app ..." />

        <jarbundler dir="${Mac_package_dir}"
                    name="${AppLauncher_name}"
                    mainclass="beast.app.tools.AppLauncherLauncher"
                    stubfile="${stubfile}"
                    useJavaXKey="true"
                    icon="${common_dir}/icons/utility.icns"
                    jvmversion="${jvm_version}"
                    vmoptions="-Xmx8g -Duser.language=en"
                    arguments=""
                    highresolutioncapable="true"
                    version="${version}"
                    copyright="${AppLauncher_name}, ${copyright}"
                    bundleid="beast.app.tools.AppLauncher">
            <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
            <javaproperty name="java.library.path" value="$JAVAROOT:/usr/local/lib"/>
            <jarfileset dir="${Mac_package_dir}/lib">
                <include name="**/launcher.jar"/>
            </jarfileset>

        </jarbundler>

        <echo message="Creating DensiTree.app ..." />

        <jarbundler dir="${Mac_package_dir}"
                    name="DensiTree"
                    mainclass="viz.DensiTree"
                    stubfile="${stubfile}"
                    useJavaXKey="true"
                    icon="${tools_dir}/DensiTree.icns"
                    jvmversion="${jvm_version}"
                    vmoptions="-Xmx8g -Duser.language=en"
                    arguments=""
                    highresolutioncapable="true"
                    version="${version}"
                    copyright="DensiTree, http://compevol.auckland.ac.nz/software/DensiTree/"
                    bundleid="viz.DensiTree">
            <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
            <javaproperty name="java.library.path" value="$JAVAROOT:/usr/local/lib"/>
            <jarfileset dir="${tools_dir}">
                <include name="**/DensiTree.jar"/>
            </jarfileset>

        </jarbundler>

    </target>

    <!-- Split from app bundle, because macjre -->
    <target name="codesign">

        <echo message="codesign BEAST.app ..." />

        <!-- code signing -->
        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="--options=runtime"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${BEAST_name}.app"/>
        </exec>

        <echo message="codesign BEAUti.app ..." />

        <!-- code signing -->
        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="--options=runtime"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${BEAUti_name}.app"/>
        </exec>

        <echo message="codesign LogCombiner.app ..." />

        <!-- code signing -->
        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="--options=runtime"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${LogCombiner_name}.app"/>
        </exec>

        <echo message="codesign TreeAnnotator.app ..." />

        <!-- code signing -->
        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="--options=runtime"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${TreeAnnotator_name}.app"/>
        </exec>

        <echo message="codesign AppLauncher_name.app ..." />

        <!-- code signing -->
        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="--options=runtime"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${AppLauncher_name}.app"/>
        </exec>

        <echo message="codesign DensiTree.app ..." />

        <!-- code signing -->
        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="--options=runtime"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/DensiTree.app"/>
        </exec>

        <!-- templates -->
        <copy todir="${Mac_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>

    </target>

    <!-- name is fixed to BEAST v2.?.? in createdmg.sh -->
    <property name="beast.dmg" value="${BEAST_name} v${version}.dmg"/>

    <!-- build dmg -->
    <target name="dmg">
        <echo message="Building disk image." />
        <exec executable='release/Mac/createdmg.sh'/>

        <exec executable="codesign">
            <!-- have to keep it -->
            <arg value="--deep"/>
            <arg value="--options=runtime"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_dir}/${beast.dmg}"/>
        </exec>

        <delete file="${Mac_dir}/pack.temp.dmg"/>
    </target>



    <!-- notarization without staple -->
    <target name="notarization">
        <fail message="DMG NOT FOUND: ${dmg.path}">
            <condition><not>
                <available file="${dmg.path}" />
            </not></condition>
        </fail>

        <echo message="Start the notarization to ${dmg.path}" />

        <input message="Apple username : " addproperty="appleusr"/>
        <input message="Apple password : " addproperty="applepwd"/>

        <exec executable="xcrun">
            <arg value="altool"/>
            <arg value="--notarize-app"/>
            <arg value="-f"/>
            <arg value="${dmg.path}"/>
            <arg value="--primary-bundle-id"/>
            <arg value="BEAST2"/>
            <arg value="-u"/>
            <arg value="${appleusr}"/>
            <arg value="-p"/>
            <arg value="${applepwd}"/>
        </exec>
        <!-- xcrun altool &#45;-notarization-info *-*-*-*-* -u * -p *-->

        <echo message="Require manually to staple the notarization because of waiting time" />

        <!--        <exec executable="xcrun">-->
        <!--            <arg value="stapler"/>-->
        <!--            <arg value="staple"/>-->
        <!--            <arg value="${Mac_dir}/${beast.dmg}"/>-->
        <!--        </exec>-->
        <!-- xcrun stapler validate BEAST\ v2.6.3.dmg -->

    </target>

    <!-- no jre -->
    <target name="mac">
        <delete dir="${Mac_package_dir}" />
        <!--<delete file="${Mac_dir}/pack.temp.dmg"/>-->
        <delete file="${Mac_dir}/${beast.dmg}"/>
        <!-- Create the release directory -->
        <mkdir dir="${Mac_package_dir}" />

        <copy todir="${Mac_package_dir}/bin">
            <fileset dir="${Linux_dir}/bin" />
        </copy>
        <chmod dir="${Mac_package_dir}/bin" perm="755" includes="**/**" />

        <copy todir="${Mac_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>
        <!-- <copy todir="${Mac_package_dir}/native">
            <fileset dir="${common_dir}/native" />
        </copy>
<copy todir="${Mac_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>
		-->

        <antcall target="bundle">
            <param name="stubfile" value="${Mac_dir}/universalJavaApplicationStub"/>
        </antcall>

        <antcall target="codesign"/>

        <antcall target="dmg"/>

        <property environment="env"/>
        <property name="dmg.path" value="../../tmp/${BEAST_name}.v${version}.dmg" />

        <copy file="${Mac_dir}/${beast.dmg}" tofile="${dmg.path}" />

        <echo message="Mac version release is finished." />

        <echo message="Go to ~/tmp to make notarization" />

        <antcall target="notarization">
             <param name="dmg.path" value="${dmg.path}"/>
        </antcall>

    </target>

    <!-- Create the app bundle -->
    <target name="macjre">
        <delete dir="${Mac_package_dir}" />
        <!--<delete file="${Mac_dir}/pack.temp.dmg"/>-->
        <delete file="${Mac_dir}/${beast.dmg}"/>
        <!-- Create the release directory -->
        <mkdir dir="${Mac_package_dir}" />

        <copy todir="${Mac_package_dir}/bin">
            <fileset dir="${Linux_dir}/jrebin" />
        </copy>
        <chmod dir="${Mac_package_dir}/bin" perm="755" includes="**/**" />

        <copy todir="${Mac_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>
        <property name="openjre" value="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre"/>
        <exec executable="cp">
		    <arg line="-R ${openjre} ${Mac_package_dir}/jre1.8.0_262"/>
		</exec>
        <!-- Deprecated JavaAppLauncher -->
<!--        <exec executable="gcc">-->
<!--		    <arg line="release/Mac/launch.c -o JavaAppLauncher"/>-->
<!--		</exec>-->
<!--        <chmod dir="./" perm="755" includes="JavaAppLauncher"/>-->
		<!--copy todir="${Mac_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>
		-->

        <antcall target="bundle">
             <param name="stubfile" value="${Mac_dir}/universalJavaApplicationJREStub"/>
        </antcall>

<!--        <delete file="${Mac_package_dir}/BEAST.app/Contents/MacOS/JavaAppLauncher"/>-->
<!--        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/BEAST.app/Contents/MacOS/"/>-->
<!--        <chmod dir="${Mac_package_dir}/BEAST.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>-->
<!--        <delete file="${Mac_package_dir}/BEAUti.app/Contents/MacOS/JavaAppLauncher"/>-->
<!--        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/BEAUti.app/Contents/MacOS/"/>-->
<!--        <chmod dir="${Mac_package_dir}/BEAUti.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>-->
<!--        <delete file="${Mac_package_dir}/LogCombiner.app/Contents/MacOS/JavaAppLauncher"/>-->
<!--        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/LogCombiner.app/Contents/MacOS/"/>-->
<!--        <chmod dir="${Mac_package_dir}/LogCombiner.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>-->
<!--        <delete file="${Mac_package_dir}/TreeAnnotator.app/Contents/MacOS/JavaAppLauncher"/>-->
<!--        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/TreeAnnotator.app/Contents/MacOS/"/>-->
<!--        <chmod dir="${Mac_package_dir}/TreeAnnotator.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>-->
<!--        <delete file="${Mac_package_dir}/AppLauncher.app/Contents/MacOS/JavaAppLauncher"/>-->
<!--        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/AppLauncher.app/Contents/MacOS/"/>-->
<!--        <chmod dir="${Mac_package_dir}/AppLauncher.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>-->
<!--        <delete file="${Mac_package_dir}/DensiTree.app/Contents/MacOS/JavaAppLauncher"/>-->
<!--        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/DensiTree.app/Contents/MacOS/"/>-->
<!--        <chmod dir="${Mac_package_dir}/DensiTree.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>-->

        <antcall target="codesign"/>

        <antcall target="dmg"/>

        <property environment="env"/>
        <property name="dmg.path" value="../../tmp/${BEAST_name}_with_JRE.v${version}.dmg" />

        <copy file="${Mac_dir}/${beast.dmg}" tofile="${dmg.path}" />

        <echo message="Mac with JRE version release is finished." />

        <echo message="Go to ~/tmp to make notarization" />

        <antcall target="notarization">
            <param name="dmg.path" value="${dmg.path}"/>
        </antcall>

    </target>



	<target name="init-fx-tasks">
		<echo message="java.home = ${java.home} "/>
		<path id="fxant">
			<filelist>
				<file name="${java.home}/../lib/ant-javafx.jar"/>
				<file name="${java.home}/../lib/jfxrt.jar"/> <!-- jdk9, jdk10 -->
				<file name="${java.home}/../jre/lib/ext/jfxrt.jar"/> <!-- jdk8 -->
			</filelist>
		</path>
	
		<taskdef resource="com/sun/javafx/tools/ant/antlib.xml"      
			uri="javafx:com.sun.javafx.tools.ant"
			classpathref="fxant"/>

	</target>

    <!-- Create the app bundle -->
    <target name="macjre3" depends="init-fx-tasks">
    

        <delete dir="${Mac_package_dir}" />
        <!--<delete file="${Mac_dir}/pack.temp.dmg"/>-->
        <delete file="${Mac_dir}/BEAST v${version}.dmg"/>
        <!-- Create the release directory -->
        <mkdir dir="${Mac_package_dir}" />

        <copy todir="${Mac_package_dir}/bin">
            <fileset dir="${Linux_dir}/jrebin" />
        </copy>
        <chmod dir="${Mac_package_dir}/bin" perm="755" includes="**/**" />

        <copy todir="${Mac_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>

        <copy file="${dist}/launcher.jar" todir="${Mac_package_dir}/lib" />
        <copy file="${dist}/beast.jar" todir="${Mac_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Mac_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Mac_package_dir}/lib"/>
        <copy todir="${Mac_package_dir}/lib">
            <fileset dir="${Mac_dir}/lib" />
        </copy> -->

        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Mac_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Mac_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Mac_package_dir}" />
        
        
		<!--
		<fx:signjar destdir="/tmp" alias="${AppleSigner}" verbose="true" storePass="" keyPass="">
			<fx:fileset dir='${dist}' includes='*.jar'/>
		</fx:signjar>
		-->
		
		<fx:resources id="appRes">
			<fx:fileset dir="${dist}" includes="launcher.jar"/>
			<fx:fileset dir="${dist}" includes="beast.jar"/>
			<!--
			<fx:fileset dir="${dist}" includes="beast.src.jar"/>
  	        <fx:fileset dir="${common_dir}" includes="VERSION HISTORY.txt"/>
    	    <fx:fileset dir="${common_dir}" includes="README.txt"/>
        	<fx:fileset dir="${common_dir}" includes="LICENSE.txt"/>
            <fx:fileset dir="./examples/" includes="*.xml" />
            <fx:fileset dir="./examples/nexus" includes="**" />
            <fx:fileset dir="./templates" includes="**" />
            -->
		</fx:resources> 
		
		<fx:application id="fxApplication"
			name="${BEAST_name}"
			mainClass="beast.app.beastapp.BeastMain"
			toolkit="fx"
		    version="${version}"
		>
            <fx:argument>-window</fx:argument>
            <fx:argument>-working</fx:argument>
            <fx:argument>-options</fx:argument>
		</fx:application>
	
		<mkdir dir="${Mac_package_dir}/build/classes/META-INF" />
		
				<fx:deploy
			embedJNLP="true"
			extension="false"
			width="1200" height="800" 
			includeDT="false"
			offlineAllowed="true"
			outdir="${Mac_package_dir}"
			outfile="${BEAUti_name}" 
			nativeBundles="image"
			updatemode="background" >
	
	    	<fx:info title="${BEAUti_name}" vendor="${appVendor}"
            	copyright="${BEAUti_name}, ${copyright}" description="${BEAUti_name}">
        		<fx:icon href="${common_dir}/icons/beauti.icns"/>   
    		</fx:info>
			<fx:application id="BEAUtiApplication"
				name="${BEAUti_name}"
				mainClass="beast.app.beauti.Beauti"
				toolkit="fx"
			    version="${version}"
			>
            	<fx:argument>-capture</fx:argument>
			</fx:application>
			<fx:resources id="appResBEAUti">
				<fx:fileset dir="${dist}" includes="beauti.jar"/>
			</fx:resources> 
			<fx:platform>
            	<fx:jvmarg value="-Xmx8g"/>
	            <fx:jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
    	        <fx:jvmarg value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
        	    <fx:jvmarg value="-Duser.language=en"/>            
            	<fx:jvmarg value="-Dbeast.load.jars=true"/>
			</fx:platform>



<!--
			<fx:secondaryLauncher name="BEAUti"
			    mainClass="beast.app.beauti.Beauti"
			    version="${version}"
			    title="BEAUti"
			    description="BEAUti"
			    copyright="${copyright}"
			    menu="true"
     			shortcut="false"
     		>
     			<fx:argument>-capture</fx:argument>
            	<fx:jvmarg value="-Xmx8g"/>
	            <fx:jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
    	        <fx:jvmarg value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
        	    <fx:jvmarg value="-Duser.language=en"/>            
            	<fx:jvmarg value="-Dbeast.load.jars=true"/>
			</fx:secondaryLauncher>
-->			
		</fx:deploy>
		
		<!-- Need to use ${basedir} because somehow the ant task is calculating the directory differently -->
		<fx:deploy
			embedJNLP="true"
			extension="false"
			width="1200" height="800" 
			includeDT="false"
			offlineAllowed="true"
			outdir="${Mac_package_dir}"
			outfile="${BEAST_name}" 
			nativeBundles="image"
			updatemode="background" >
	
	    	<fx:info title="${BEAST_name}" vendor="${appVendor}"
            	copyright="${BEAST_name}, ${copyright}" description="${BEAST_name}">
        		<fx:icon href="${common_dir}/icons/beast.icns"/>   
    		</fx:info>
			<fx:application refId="fxApplication"/>
			<fx:resources id="appResBEAUST">
				<fx:fileset dir="${dist}" includes="beast.jar"/>
			</fx:resources> 
			<fx:platform>
            	<fx:jvmarg value="-Xmx8g"/>
	            <fx:jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
    	        <fx:jvmarg value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
        	    <fx:jvmarg value="-Duser.language=en"/>            
            	<fx:jvmarg value="-Dbeast.load.jars=true"/>
			</fx:platform>



<!--
			<fx:secondaryLauncher name="BEAUti"
			    mainClass="beast.app.beauti.Beauti"
			    version="${version}"
			    title="BEAUti"
			    description="BEAUti"
			    copyright="${copyright}"
			    menu="true"
     			shortcut="false"
     		>
     			<fx:argument>-capture</fx:argument>
            	<fx:jvmarg value="-Xmx8g"/>
	            <fx:jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
    	        <fx:jvmarg value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
        	    <fx:jvmarg value="-Duser.language=en"/>            
            	<fx:jvmarg value="-Dbeast.load.jars=true"/>
			</fx:secondaryLauncher>
-->			
		</fx:deploy>



        <echo message="Signing..." />

        <exec executable="codesign">
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_dir}/${BEAST_name}/BEAST-${version}.dmg"/>
        </exec>

        <echo message="Mac with JRE version release is finished." />
    </target>




    <target name="doc" description="Create Developer Docs for Beast 2" depends='javadoc'>
        <copy file="doc/tutorial.slides.part1.pdf" tofile="release/common/doc/develop/" />
        <copy file="doc/tutorial.slides.part2.pdf" tofile="release/common/doc/develop/" />
        <!-- part 3 needs updating -->
        <!--copy file="doc/tutorial.slides.part3.pdf" tofile="release/common/doc/develop/" /-->
    </target>

    <target name="javadoc" description="Create Javadocs for Beast 2" depends='docPreProcess'>
        <mkdir dir="${common_dir}/javadoc/" />
        <javadoc destdir="${common_dir}/javadoc/">
            <fileset dir="src2/" includes="beast/**/*.java" />
            <!--<fileset dir="src2/" includes="beast/core/**/*.java" />-->
            <!--<fileset dir="src2/" includes="beast/util/**/*.java" />-->
            <!--<fileset dir="src2/" includes="beast/math/**/*.java" />-->
            <!--<fileset dir="src2/" includes="beast/evolution/**/*.java" />-->
        </javadoc>

        <!-- clean up -->
        <delete dir="src2/"/>
    </target>

    <!-- run perl script that extracts @Description and Input.description info for javadoc -->
    <target name="docPreProcess">
        <exec executable="perl" dir="${basedir}">
            <arg value="scripts/doc.pl" />
        </exec>
    </target>

    <property name="sdk_dir" value="${release_dir}/${BEAST_name}_SDK" />

    <!-- zip up everything that goes in the SDK -->
    <target name="sdk" description="Create Beast 2 SDK" depends="dist_all_BEAST,javadoc">

        <delete file="${release_dir}/${BEAST_name}_v${version}_SDK.zip" />

        <copy file="doc/slides/sdk.pdf" tofile="${common_dir}/Beast_2_Getting_Started.pdf" />

        <zip destfile="${release_dir}/${BEAST_name}_v${version}_SDK.zip">
            <fileset dir="${common_dir}">
                <include name="**/*.txt" />
                <include name="**/*.pdf" />
                <include name="javadoc/**/*.*" />
            </fileset>
            <fileset dir="${dist}">
                <include name="beast.jar" />
                <include name="beast.src.jar" />
            </fileset>
        </zip>

        <!-- clean up -->
        <delete file="${common_dir}/Beast_2_Getting_Started.pdf" />

        <echo message="SDK release is finished." />
    </target>

</project>

