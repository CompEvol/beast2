<!-- Build BEAST 2. It is also used by Hudson BEAST_2 project. JUnit test is available for this build. -->
<project basedir="." default="build_jar_all_BEAST" name="BUILD_BEAST_2">
    <description>
        Build BEAST 2.
        Also used by Hudson BEAST_2 project.
        JUnit test is available for this build.
        $Id: build_BEAST_2.xml $
    </description>

    <!-- set global properties for this build -->
    <property name="src" location="../beast2/src" />
    <property name="build" location="../beast2/build" />
    <property name="lib" location="../beast2/lib" />
    <property name="doc" location="../beast2/doc" />
    <property name="dist" location="../beast2/build/dist" />
    <property name="test" location="../beast2/test" />

    <property name="main_class_BEAST" value="beast.app.beastapp.BeastMain" />
    <property name="report" value="build/junitreport" />

    <path id="classpath">
        <fileset dir="${lib}" includes="beagle.jar"/>
        <fileset dir="${lib}" includes="jam.jar"/>
        <fileset dir="${lib}" includes="colt.jar"/>
        <fileset dir="${lib}" includes="fest.jar"/>
        <fileset dir="${lib}" includes="junit-4.8.2.jar"/>
        <fileset dir="${lib}" includes="antlr-runtime-4.7.jar"/>
    </path>

    <!--
        <path id="testclasspath">
            <fileset dir="${lib}" includes="**/*.jar" />
        </path>
    -->

    <!-- start -->
    <target name="init">
        <echo message="${ant.project.name}: ${ant.file}" />
    </target>

    <target name="clean">
        <delete dir="${build}" />
        <delete dir="${test}" />
    </target>

    <!-- clean previous build, and then compile Java source code, and Juint test -->
    <target name="build_all_BEAST" depends="clean,compile-all,junit" description="Clean and Build all run-time stuff">
    </target>

    <!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
    <target name="build_jar_all_BEAST"
            depends="clean,compile-all,junit,dist_all_BEAST"
            description="Clean and Build all run-time stuff">
    </target>


    <!-- No JUnit Test, clean previous build, compile Java source code, and make the beast.jar and beauti.jar -->
    <target name="build_jar_all_BEAST_NoJUnitTest"
            depends="clean,compile-all,dist_all_BEAST"
            description="Clean and Build all run-time stuff">
    </target>

    <!-- compile Java source code -->
    <target name="compile-all" depends="init">
        <echo>Building BEAST 2</echo>
        <mkdir dir="${build}" />

        <!-- Compile the java code from ${src} into ${build} /bin -->
        <javac source="1.8"
               target="1.8"
               srcdir="${src}"
               destdir="${build}"
               classpathref="classpath"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="1024m"
               includeAntRuntime='false'>
            <include name="beast/**/**" />
            <!-- apache commons math -->
            <include name="org/**/**" />
            <!-- compile JUnit test classes -->
            <include name="test/beast/**" />
        </javac>

        <!-- compile the launcher apps against Java 6-->
        <delete file="${build}/beast/app/beauti/BeautiLauncher.class" />
        <delete file="${build}/beast/app/tools/AppLauncherLauncher.class" />
        <delete file="${build}/beast/app/tools/LogCombinerLauncher.class" />
        <delete file="${build}/beast/app/treeannotator/TreeAnnotatorLauncher.class" />
        <delete file="${build}/beast/app/util/Utils6.class" />
        <delete file="${build}/beast/app/BEASTVersion.class" />
        <delete>
	      <fileset dir="${build}/beast/core/util/" includes="Log*.class" />
    	  <fileset dir="${build}/beast/app/beastapp/" includes="BeastLauncher*.class" />
	      <fileset dir="${build}/beast/app/util/" includes="Arguments*.class"/>
	      <fileset dir="${build}/beast/util/" includes="Package*.class"/>
    	</delete>
        <delete file="${build}/beast/app/util/Version.class" />
        <javac source="1.6"
               target="1.6"
               bootclasspath='/opt/jdk1.6.0_45/jre/lib/rt.jar'
               srcdir="${src}"
               destdir="${build}"
               classpathref="classpath"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="1024m"
               includeAntRuntime='false'>
            <include name="beast/**/*Launcher.java" />
            <include name="beast/**/Utils6.java" />
            <include name="beast/**/BEASTVersion.java" />
            <include name="beast/**/Version.java" />
            <include name="beast/util/Package*.java" />
            <include name="beast/app/util/Arguments.java" />
            <include name="beast/core/util/Log.java" />
        </javac>
        <copy todir="${build}">
            <fileset dir="${src}" includes="**/*.properties" />
            <fileset dir="${src}" includes="**/*.png" />
        </copy>
        <echo message="Successfully compiled." />
    </target>

    <!-- make the beast.jar -->
    <target name="dist_all_BEAST" depends="compile-all" description="create BEAST jar">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}" />

        <!-- Put everything in ${build} into the beast.jar file -->
        <jar jarfile="${dist}/beast.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="${main_class_BEAST}" />
            </manifest>
            <fileset dir="${build}">
                <include name="beast/**/*.class" />
                <include name="beast/**/*.properties" />
                <include name="beast/**/*.png" />
                <include name="beagle/**/*.class" />
                <include name="org/**/*.class" />
            </fileset>
            <zipgroupfileset dir="${lib}" includes="jam.jar" />
            <zipgroupfileset dir="${lib}" includes="beagle.jar" />
            <zipgroupfileset dir="${lib}" includes="colt.jar" />
            <zipgroupfileset dir="${lib}" includes="commons-math3-3.1.1.jar" />
            <zipgroupfileset dir="${lib}" includes="antlr-runtime-4.7.jar"/>
        </jar>
        <jar jarfile="${dist}/launcher.jar">
            <fileset dir="${build}">
                <include name="beast/**/*Launcher*.class" />
                <exclude name="beast/app/tools/AppLauncher.class"/>
                <exclude name="beast/app/tools/AppLauncher$*.class"/>
                <include name="beast/**/Utils6*.class" />
                <include name="beast/**/BEASTVersion.class" />
                <include name="beast/**/Version.class" />
		    	<include name="beast/app/util/Arguments*.class" />
                <include name="beast/util/Package*.class" />
                <include name="beast/app/draw/icons/beauti.png"/>
                <include name="beast/core/util/Log*.class" />
            </fileset>
        </jar>
        <jar jarfile="${dist}/beast.src.jar">
            <fileset dir="${src}">
                <include name="beast/**/*.java" />
                <include name="org/**/*.java" />
                <include name="test/**/*.java" />
                <include name="beast/**/*.png" />
                <include name="beast/**/*.xsl" />
            </fileset>
        </jar>

        <!-- create BEAST package -->
        <mkdir dir="${release_dir}/package/" />
        <mkdir dir="${release_dir}/package/lib" />
        <copy file="${dist}/beast.src.jar" todir="${release_dir}/package/"/>
        <copy file="${dist}/beast.jar" todir="${release_dir}/package/lib/"/>
        <copy file="../beast2/version.xml" todir="${release_dir}/package/"/>

        <jar jarfile="${release_dir}/package/BEAST.package.v${version}.zip">
            <fileset dir="${release_dir}/package">
                <include name="version.xml" />
                <include name="lib/beast.jar" />
                <include name="beast.src.jar" />
            </fileset>
            <fileset dir=".">
                <include name="templates/*.xml" />
                <include name="examples/*.*" />
                <include name="examples/nexus/*.*" />
            </fileset>
         </jar>

</target>

    <!-- run beast.jar -->
    <target name="run_BEAST">
        <java jar="${dist}/beast.jar" fork="true" />
    </target>

    <!-- JUnit test -->
    <target name="junit">
        <mkdir dir="${report}" />
        <junit printsummary="yes" failureproperty="junitfailed">
            <!--showoutput='yes'-->
            <classpath>
                <path refid="classpath" />
                <path location="${build}" />
            </classpath>

            <formatter type="xml" />

            <batchtest fork="yes" todir="${report}">
                <fileset dir="${src}">
                    <include name="test/**/*Test.java" />
                    <exclude name="test/beast/beast2vs1/**/*Test.java"/>
                    <exclude name="test/beast/app/beauti/**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <echo message="JUnit test finished." />
    </target>

    <target name="junitreport">
        <junitreport todir="${report}">
            <fileset dir="${report}" includes="*.xml" />
            <report format="frames" todir="${report}" />
        </junitreport>
        <echo message="JUnit test report finished." />
    </target>

    <!-- Target for Travis-CI with non-zero exit status on test failure. -->
    <target name="travis" depends="clean, compile-all, junit, junitb">
        <fail if="junitfailed" message="One or more CORE BEAST tests failed."/>
        <fail if="junitbfailed" message="One or more BEAUTI tests failed."/>
    </target>

    <!-- testing beauti gui-->
    <target name="junitb">
        <mkdir dir="${report}" />
        <junit printsummary="yes" failureproperty="junitbfailed">
            <!--showoutput='yes'-->
            <classpath>
                <path refid="classpath" />
                <path location="${build}" />
            </classpath>

            <formatter type="xml" />

            <batchtest fork="yes" todir="${report}">
                <fileset dir="${src}">
                    <include name="test/beast/app/beauti/**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <echo message="JUnit test finished." />
    </target>


    <!-- Release -->
    <property name="version" value="2.5.0" />
    <property name="version_number" value="2.5.0" />
    <property name="release_dir" value="release" />
    <property name="copyright" value="Beast 2 development team 2011-2018" />

    <property name="BEAST_name" value="BEAST" />
    <property name="beast_name" value="beast" />
    <property name="BEAUti_name" value="BEAUti" />
    <property name="TreeAnnotator_name" value="TreeAnnotator" />
    <property name="LogCombiner_name" value="LogCombiner" />
    <property name="LogAnalyser_name" value="LogAnalyser" />
    <property name="AppLauncher_name" value="AppLauncher" />

    <property name="common_dir" value="${release_dir}/common" />
    <property name="Mac_dir" value="${release_dir}/Mac" />
    <property name="Linux_dir" value="${release_dir}/Linux" />
    <property name="Windows_dir" value="${release_dir}/Windows" />
    <property name="beast1_dir" value="${common_dir}/beast1" />
    <property name="tools_dir" value="${common_dir}/tools" />

    <property name="Mac_package_dir" value="${Mac_dir}/${BEAST_name}" />
    <property name="Mac_bundle_dir" value="${Mac_package_dir}/${BEAST_name}" />
    <property name="Linux_package_dir" value="${Linux_dir}/${beast_name}" />
    <property name="Windows_package_dir" value="${Windows_dir}/${BEAST_name}" />

    <!-- Need to either install Launch4j under {BEAST workspace}/${release}
                 or install it in the default directory and change the location of launch4j.dir -->
    <!--depends="build_jar_all_BEAST_NoJUnitTest"-->
    <target name="windows"
            description="release Windows version of BEAST, BEAUTI, TreeAnnotator, LogCombiner">

        <delete dir="${Windows_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Windows_package_dir}" />

        <property name="launch4j.dir" location="../launch4j" />
        <taskdef name="launch4j"
                 classname="net.sf.launch4j.ant.Launch4jTask"
                 classpath="${launch4j.dir}/launch4j.jar :${launch4j.dir}/lib/xstream.jar" />

        <copy todir="${Windows_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>
        <!--<copy todir="${Windows_package_dir}/native">
            <fileset dir="${common_dir}/native"/>
        </copy>
        <copy todir="${Windows_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>
        <copy todir="${Windows_package_dir}/bin">
            <fileset dir="${Windows_dir}/scripts"/>
        </copy>
        <copy file="${dist}/beauti.jar" todir="${Windows_package_dir}/lib"/>-->
        <copy file="${dist}/beast.jar" todir="${Windows_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Windows_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Windows_package_dir}/lib"/>
        <copy todir="${Windows_package_dir}/lib">
            <fileset dir="${Windows_dir}/lib"/>
        </copy>-->
        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Windows_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Windows_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Windows_package_dir}" />

        <!-- BEAUTi v?.?.?.exe -->
        <launch4j configFile="${Windows_dir}/BEAUti_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${BEAUti_name}.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}" >
                  <!-- to bunle a JRE, copy the desired JRE to folder ../jre 
                       (so java.exe is in ../jre/bin/) and uncomment following fragment
                       TODO: needs testing
                  <jre>
                      <path>../jre</path>
    			  </jre>
    			  -->
         </launch4j>

        <!-- BEAST v?.?.?.exe -->
        <launch4j configFile="${Windows_dir}/BEAST_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${BEAST_name}.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}" />

        <!--<launch4j configFile="${Windows_dir}/TreeStat_launch4j.xml"
                              jar="${dist}/beast.jar"
                              outfile="${Windows_package_dir}/${TreeStat_name}.exe"
                              fileVersion="${version_number}.0"
                              txtFileVersion="${version}"
                              productVersion="${version_number}.0"
                              txtProductVersion="${version}"/>-->

        <!-- LogAnalyser v?.?.?.exe
            <launch4j configFile="${Windows_dir}/LogAnalyser_launch4j.xml"
                              jar="${dist}/beast.jar"
                              outfile="${Windows_package_dir}/${LogAnalyser_name}v${version}.exe"
                              fileVersion="${version}.0"
                              txtFileVersion="${version}"
                              productVersion="${version}.0"
                              txtProductVersion="${version}"/>      -->

        <launch4j configFile="${Windows_dir}/LogCombiner_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${LogCombiner_name}.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}"/>


        <launch4j configFile="${Windows_dir}/TreeAnnotator_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/TreeAnnotator.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}"/>

        <launch4j configFile="${tools_dir}/DensiTree_launch4j.xml"
                  jar="${tools_dir}/DensiTree.jar"
                  outfile="${Windows_package_dir}/DensiTree.exe"
                  fileVersion="2.0.0.0"
                  txtFileVersion="2.0.0.0"
                  productVersion="2.0.0.0"
                  txtProductVersion="2.0.0.0" />

        <launch4j configFile="${Windows_dir}/AppLauncher_launch4j.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/AppLauncher.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}"/>

        <copy todir="${Windows_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>
        <!--
                <copy file="${beast1_dir}/LogCombiner.exe" todir="${Windows_package_dir}" />
                <copy file="${beast1_dir}/TreeAnnotator.exe" todir="${Windows_package_dir}" />
        -->
        <zip destfile="${Windows_dir}/${BEAST_name}.v${version}.zip">
            <zipfileset dir="${Windows_package_dir}" prefix="${BEAST_name}" />
        </zip>
       <copy file="${Windows_dir}/${BEAST_name}.v${version}.zip" todir="../../tmp/" />

        <echo message="Windows version release is finished." />
    </target>

    <!-- Need to either install Launch4j under {BEAST workspace}/${release}
                 or install it in the default directory and change the location of launch4j.dir -->
    <!--depends="build_jar_all_BEAST_NoJUnitTest"-->
    <target name="windowsjre"
            description="release Windows version of BEAST, BEAUTI, TreeAnnotator, LogCombiner">

        <delete dir="${Windows_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Windows_package_dir}" />

        <property name="launch4j.dir" location="../launch4j" />
        <taskdef name="launch4j"
                 classname="net.sf.launch4j.ant.Launch4jTask"
                 classpath="${launch4j.dir}/launch4j.jar :${launch4j.dir}/lib/xstream.jar" />

        <copy todir="${Windows_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>
        <copy todir="${Windows_package_dir}/jre">
            <fileset dir="../jre1.8.0_161" />
        </copy>
        <!--<copy todir="${Windows_package_dir}/native">
            <fileset dir="${common_dir}/native"/>
        </copy>
        <copy todir="${Windows_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>
        <copy todir="${Windows_package_dir}/bin">
            <fileset dir="${Windows_dir}/scripts"/>
        </copy>
        <copy file="${dist}/beauti.jar" todir="${Windows_package_dir}/lib"/>-->
        <copy file="${dist}/beast.jar" todir="${Windows_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Windows_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Windows_package_dir}/lib"/>
        <copy todir="${Windows_package_dir}/lib">
            <fileset dir="${Windows_dir}/lib"/>
        </copy>-->
        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Windows_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Windows_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Windows_package_dir}" />

        <!-- BEAUTi v?.?.?.exe -->
        <launch4j configFile="${Windows_dir}/BEAUti_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${BEAUti_name}.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}" >
                  <!-- to bunle a JRE, copy the desired JRE to folder ../jre 
                       (so java.exe is in ../jre/bin/) and uncomment following fragment
                       TODO: needs testing
                  <jre>
                      <path>../jre</path>
    			  </jre>
    			  -->
         </launch4j>

        <!-- BEAST v?.?.?.exe -->
        <launch4j configFile="${Windows_dir}/BEAST_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${BEAST_name}.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}" />

        <!--<launch4j configFile="${Windows_dir}/TreeStat_launch4j.xml"
                              jar="${dist}/beast.jar"
                              outfile="${Windows_package_dir}/${TreeStat_name}.exe"
                              fileVersion="${version_number}.0"
                              txtFileVersion="${version}"
                              productVersion="${version_number}.0"
                              txtProductVersion="${version}"/>-->

        <!-- LogAnalyser v?.?.?.exe
            <launch4j configFile="${Windows_dir}/LogAnalyser_launch4j_jre.xml"
                              jar="${dist}/beast.jar"
                              outfile="${Windows_package_dir}/${LogAnalyser_name}v${version}.exe"
                              fileVersion="${version}.0"
                              txtFileVersion="${version}"
                              productVersion="${version}.0"
                              txtProductVersion="${version}"/>      -->

        <launch4j configFile="${Windows_dir}/LogCombiner_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/${LogCombiner_name}.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}"/>


        <launch4j configFile="${Windows_dir}/TreeAnnotator_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/TreeAnnotator.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}"/>

        <launch4j configFile="${tools_dir}/DensiTree_launch4j_jre.xml"
                  jar="${tools_dir}/DensiTree.jar"
                  outfile="${Windows_package_dir}/DensiTree.exe"
                  fileVersion="2.0.0.0"
                  txtFileVersion="2.0.0.0"
                  productVersion="2.0.0.0"
                  txtProductVersion="2.0.0.0" />

        <launch4j configFile="${Windows_dir}/AppLauncher_launch4j_jre.xml"
                  jar="${dist}/launcher.jar"
                  outfile="${Windows_package_dir}/AppLauncher.exe"
                  fileVersion="${version_number}.0"
                  txtFileVersion="${version}"
                  productVersion="${version_number}.0"
                  txtProductVersion="${version}"/>

        <copy todir="${Windows_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>
        <!--
                <copy file="${beast1_dir}/LogCombiner.exe" todir="${Windows_package_dir}" />
                <copy file="${beast1_dir}/TreeAnnotator.exe" todir="${Windows_package_dir}" />
        -->
        <zip destfile="${Windows_dir}/${BEAST_name}.v${version}.zip">
            <zipfileset dir="${Windows_package_dir}" prefix="${BEAST_name}" />
        </zip>
       <copy file="${Windows_dir}/${BEAST_name}.v${version}.zip" todir="../../tmp/" />

        <echo message="Windows version release is finished." />
    </target>

    <target name="linux"
            depends="build_jar_all_BEAST_NoJUnitTest"
            description="release Linux/Unix version of BEAST, BEAUTI, TreeAnnotator, LogCombiner">
        <delete dir="${Linux_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Linux_package_dir}" />

        <copy todir="${Linux_package_dir}/bin">
            <fileset dir="${Linux_dir}/bin" />
        </copy>
        <chmod dir="${Linux_package_dir}/bin" perm="755" includes="**/**" />

        <!--<copy todir="${Linux_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>-->
        <copy todir="${Linux_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>

        <copy file="${common_dir}/icons/beast.png" todir="${Linux_package_dir}/images" />
        <copy file="${common_dir}/icons/beauti.png" todir="${Linux_package_dir}/images" />
        <!-- <copy file="${common_dir}/icons/utility.png" todir="${Linux_package_dir}/images" />
        <copy file="${dist}/beauti.jar" todir="${Linux_package_dir}/lib" /> -->
        <copy file="${dist}/launcher.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/beast.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Linux_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Linux_package_dir}/lib"/>
        <copy todir="${Linux_package_dir}/lib">
            <fileset dir="${Linux_dir}/lib" />
        </copy>-->

        <!--
        <copy file="${beast1_dir}/beast161.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${tools_dir}/treeannotator.jar" todir="${Linux_package_dir}/lib" />
        -->

        <copy file="${tools_dir}/DensiTree.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${tools_dir}/DensiTree.png" todir="${Linux_package_dir}/images" />

        <copy todir="${Linux_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>
        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Linux_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Linux_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Linux_package_dir}" />

        <!-- Only works under Unix or NonStop Kernel (Tandem) -->
        <!-- <chmod dir="${Linux_package_dir}/bin" perm="755" includes="**/**"/>

            <tar destfile="${Linux_dir}/${BEAST_name}v${version}.tgz" compression="gzip">
                    <tarfileset dir="${Linux_package_dir}" prefix="${BEAST_name}v${version}"/>
            </tar>-->
        <!-- [ANT Bug 550] the tar task change the mode of the executables files, have to tar manaully -->
        <echo message="Have to tar manaully, because [ANT Bug 550] the tar task change the mode of the executables files." />
        <!-- tar -cvzf BEASTv1.x.x.tgz BEASTv2.x.x/ -->
        <!-- cksum BEASTv2.x.x.tgz -->
        <!-- tar -xvzf BEASTv2.x.x.tgz -->
        <echo message="Linux/Unix version release is finished." />
        
        <echo message="cd release/Linux"/>
        <echo message="tar fcz BEAST.v${version}.tgz beast"/>
        <echo message="cp BEAST.v${version}.tgz ~/tmp"/>
    </target>

<!--            depends="build_jar_all_BEAST_NoJUnitTest"-->
    <target name="linuxjre"
            description="release Linux/Unix version of BEAST, BEAUTI, TreeAnnotator, LogCombiner">
        <delete dir="${Linux_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Linux_package_dir}" />

        <copy todir="${Linux_package_dir}/bin">
            <fileset dir="${Linux_dir}/jrebin" />
        </copy>
        <chmod dir="${Linux_package_dir}/bin" perm="755" includes="**/**" />
        <exec executable="cp">
		<arg line="-R ../jre1.8.0_161 ${Linux_package_dir}/jre1.8.0_161"/>
	</exec>

        <!--<copy todir="${Linux_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>-->
        <copy todir="${Linux_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>

        <copy file="${common_dir}/icons/beast.png" todir="${Linux_package_dir}/images" />
        <copy file="${common_dir}/icons/beauti.png" todir="${Linux_package_dir}/images" />
        <!-- <copy file="${common_dir}/icons/utility.png" todir="${Linux_package_dir}/images" />
        <copy file="${dist}/beauti.jar" todir="${Linux_package_dir}/lib" /> -->
        <copy file="${dist}/launcher.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/beast.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Linux_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Linux_package_dir}/lib"/>
        <copy todir="${Linux_package_dir}/lib">
            <fileset dir="${Linux_dir}/lib" />
        </copy>-->

        <!--
        <copy file="${beast1_dir}/beast161.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${tools_dir}/treeannotator.jar" todir="${Linux_package_dir}/lib" />
        -->

        <copy file="${tools_dir}/DensiTree.jar" todir="${Linux_package_dir}/lib" />
        <copy file="${tools_dir}/DensiTree.png" todir="${Linux_package_dir}/images" />

        <copy todir="${Linux_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>
        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Linux_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Linux_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Linux_package_dir}" />

        <!-- Only works under Unix or NonStop Kernel (Tandem) -->
        <!-- <chmod dir="${Linux_package_dir}/bin" perm="755" includes="**/**"/>

            <tar destfile="${Linux_dir}/${BEAST_name}v${version}.tgz" compression="gzip">
                    <tarfileset dir="${Linux_package_dir}" prefix="${BEAST_name}v${version}"/>
            </tar>-->
        <!-- [ANT Bug 550] the tar task change the mode of the executables files, have to tar manaully -->
        <echo message="Have to tar manaully, because [ANT Bug 550] the tar task change the mode of the executables files." />
        <!-- tar -cvzf BEASTv1.x.x.tgz BEASTv2.x.x/ -->
        <!-- cksum BEASTv2.x.x.tgz -->
        <!-- tar -xvzf BEASTv2.x.x.tgz -->
        <echo message="Linux/Unix version release is finished." />
        
        <echo message="cd release/Linux"/>
        <echo message="tar fcz BEAST.v${version}.tgz beast"/>
        <echo message="cp BEAST.v${version}.tgz ~/tmp"/>
    </target>

    <!-- Define the appbundler task -->
    <taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask" classpath="../beast2/lib/bundler/appbundler-1.0.jar"/>

    <!--property name="AppleSigner" value="Developer ID Application: Alexei Drummond (6M6Y6L7RUP)" /-->
    <property name="AppleSigner" value="Developer ID Application: Remco Bouckaert (LHFJWE5U63)" />    
    
    <!-- Create the app bundle -->
    <target name="mac">
        <delete dir="${Mac_package_dir}" />
        <!--<delete file="${Mac_dir}/pack.temp.dmg"/>-->
        <delete file="${Mac_dir}/BEAST v${version}.dmg"/>
        <!-- Create the release directory -->
        <mkdir dir="${Mac_package_dir}" />

        <copy todir="${Mac_package_dir}/bin">
            <fileset dir="${Linux_dir}/bin" />
        </copy>
        <chmod dir="${Mac_package_dir}/bin" perm="755" includes="**/**" />

        <copy todir="${Mac_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>
        <!-- <copy todir="${Mac_package_dir}/native">
            <fileset dir="${common_dir}/native" />
        </copy>
<copy todir="${Mac_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>

        <copy file="${dist}/beauti.jar" todir="${Mac_package_dir}/lib" /> -->
        <copy file="${dist}/launcher.jar" todir="${Mac_package_dir}/lib" />
        <copy file="${dist}/beast.jar" todir="${Mac_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Mac_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Mac_package_dir}/lib"/>
        <copy todir="${Mac_package_dir}/lib">
            <fileset dir="${Mac_dir}/lib" />
        </copy> -->

        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Mac_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Mac_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Mac_package_dir}" />

        <echo message="Creating BEAST.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${BEAST_name}"
                   displayname="${BEAST_name}"
                   identifier="beast.app.beastapp.BeastMain"
                   icon="${common_dir}/icons/beast.icns"
                   shortversion="${version}"
                   copyright="${BEAST_name}, ${copyright}"
                   mainclassname="beast.app.beastapp.BeastLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <!-- adding a 'runtime' entry will include the JRE for OSX
            <runtime dir="/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home"/>
            -->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
            <argument value="-window"/>
            <argument value="-working"/>
            <argument value="-options"/>
        </bundleapp>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${BEAST_name}.app"/>
        </exec>

        <echo message="Creating BEAUti.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${BEAUti_name}"
                   displayname="${BEAUti_name}"
                   identifier="beast.app.beauti.Beauti"
                   icon="${common_dir}/icons/beauti.icns"
                   shortversion="${version}"
                   copyright="${BEAUti_name}, ${copyright}"
                   mainclassname="beast.app.beauti.BeautiLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Xdock:name=&quot;BEAUti&quot;"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
            <argument value="-capture"/>
        </bundleapp>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${BEAUti_name}.app"/>
        </exec>

        <echo message="Creating LogCombiner.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${LogCombiner_name}"
                   displayname="${LogCombiner_name}"
                   identifier="beast.app.tools.LogCombiner"
                   icon="${common_dir}/icons/utility.icns"
                   shortversion="${version}"
                   copyright="${LogCombiner_name}, ${copyright}"
                   mainclassname="beast.app.tools.LogCombinerLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
        </bundleapp>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${LogCombiner_name}.app"/>
        </exec>

        <echo message="Creating TreeAnnotator.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${TreeAnnotator_name}"
                   displayname="${TreeAnnotator_name}"
                   identifier="beast.app.treeannotator.TreeAnnotator"
                   icon="${common_dir}/icons/utility.icns"
                   shortversion="${version}"
                   copyright="${TreeAnnotator_name}, ${copyright}"
                   mainclassname="beast.app.treeannotator.TreeAnnotatorLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
        </bundleapp>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${TreeAnnotator_name}.app"/>
        </exec>

        <echo message="Creating DensiTree.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="DensiTree"
                   displayname="DensiTree"
                   identifier="viz.DensiTree"
                   icon="${tools_dir}/DensiTree.icns"
                   shortversion="2.0"
                   copyright="DensiTree, http://compevol.auckland.ac.nz/software/DensiTree/"
                   mainclassname="viz.DensiTree">
            <classpath file="${tools_dir}/DensiTree.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
        </bundleapp>

        <exec executable="codesign">
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/DensiTree.app"/>
        </exec>

        <echo message="Creating AppLauncher.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${AppLauncher_name}"
                   displayname="${AppLauncher_name}"
                   identifier="beast.app.tools.AppLauncher"
                   icon="${common_dir}/icons/utility.icns"
                   shortversion="${version}"
                   copyright="${AppLauncher_name}, ${copyright}"
                   mainclassname="beast.app.tools.AppLauncherLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx1024M"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
        </bundleapp>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${AppLauncher_name}.app"/>
        </exec>

        <copy todir="${Mac_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>

        <echo message="Building disk image." />
        <exec executable='release/Mac/createdmg.sh'/>

        <exec executable="codesign">
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_dir}/${BEAST_name} v${version}.dmg"/>
        </exec>

        <delete file="${Mac_dir}/pack.temp.dmg"/>
        
       <copy file="${Mac_dir}/${BEAST_name} v${version}.dmg" tofile="../../tmp/${BEAST_name}.v${version}.dmg" />


        <echo message="Mac version release is finished." />
    </target>


    <!-- Create the app bundle -->
    <target name="macjre">
        <delete dir="${Mac_package_dir}" />
        <!--<delete file="${Mac_dir}/pack.temp.dmg"/>-->
        <delete file="${Mac_dir}/BEAST v${version}.dmg"/>
        <!-- Create the release directory -->
        <mkdir dir="${Mac_package_dir}" />

        <copy todir="${Mac_package_dir}/bin">
            <fileset dir="${Linux_dir}/jrebin" />
        </copy>
        <chmod dir="${Mac_package_dir}/bin" perm="755" includes="**/**" />

        <copy todir="${Mac_package_dir}/examples/">
            <fileset dir="examples/">
                <include name="*.xml" />
                <include name="nexus/**" />
                <exclude name="benchmark/**" />
            </fileset>
        </copy>
        <exec executable="cp">
		    <arg line="-R ../jre1.8.0_161.jre/Contents/Home ${Mac_package_dir}/jre1.8.0_161"/>
		</exec>
        <exec executable="gcc">
		    <arg line="release/Mac/launch.c -o JavaAppLauncher"/>
		</exec>
		<!--copy todir="${Mac_package_dir}/doc">
            <fileset dir="${common_dir}/doc" />
        </copy>

        <copy file="${dist}/beauti.jar" todir="${Mac_package_dir}/lib" /> -->
        <copy file="${dist}/launcher.jar" todir="${Mac_package_dir}/lib" />
        <copy file="${dist}/beast.jar" todir="${Mac_package_dir}/lib" />
        <copy file="${dist}/beast.src.jar" todir="${Mac_package_dir}/lib" />
        <!-- <copy file="${dist}/beast-beagle.jar" todir="${Mac_package_dir}/lib"/>
        <copy todir="${Mac_package_dir}/lib">
            <fileset dir="${Mac_dir}/lib" />
        </copy> -->

        <copy file="${common_dir}/VERSION HISTORY.txt" todir="${Mac_package_dir}" />
        <copy file="${common_dir}/README.txt" todir="${Mac_package_dir}" />
        <copy file="${common_dir}/LICENSE.txt" todir="${Mac_package_dir}" />

        <echo message="Creating BEAST.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${BEAST_name}"
                   displayname="${BEAST_name}"
                   identifier="beast.app.beastapp.BeastMain"
                   icon="${common_dir}/icons/beast.icns"
                   shortversion="${version}"
                   copyright="${BEAST_name}, ${copyright}"
                   mainclassname="beast.app.beastapp.BeastLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <!-- adding a 'runtime' entry will include the JRE for OSX
            <runtime dir="/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home"/>
            -->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
            <argument value="-window"/>
            <argument value="-working"/>
            <argument value="-options"/>
        </bundleapp>
        <delete file="${Mac_package_dir}/BEAST.app/Contents/MacOS/JavaAppLauncher"/>
        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/BEAST.app/Contents/MacOS/"/>
        <chmod dir="${Mac_package_dir}/BEAST.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${BEAST_name}.app"/>
        </exec>

        <echo message="Creating BEAUti.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${BEAUti_name}"
                   displayname="${BEAUti_name}"
                   identifier="beast.app.beauti.Beauti"
                   icon="${common_dir}/icons/beauti.icns"
                   shortversion="${version}"
                   copyright="${BEAUti_name}, ${copyright}"
                   mainclassname="beast.app.beauti.BeautiLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Xdock:name=&quot;BEAUti&quot;"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
            <argument value="-capture"/>
        </bundleapp>
        <delete file="${Mac_package_dir}/BEAUti.app/Contents/MacOS/JavaAppLauncher"/>
        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/BEAUti.app/Contents/MacOS/"/>
        <chmod dir="${Mac_package_dir}/BEAUti.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${BEAUti_name}.app"/>
        </exec>

        <echo message="Creating LogCombiner.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${LogCombiner_name}"
                   displayname="${LogCombiner_name}"
                   identifier="beast.app.tools.LogCombiner"
                   icon="${common_dir}/icons/utility.icns"
                   shortversion="${version}"
                   copyright="${LogCombiner_name}, ${copyright}"
                   mainclassname="beast.app.tools.LogCombinerLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
        </bundleapp>
        <delete file="${Mac_package_dir}/LogCombiner.app/Contents/MacOS/JavaAppLauncher"/>
        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/LogCombiner.app/Contents/MacOS/"/>
        <chmod dir="${Mac_package_dir}/LogCombiner.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${LogCombiner_name}.app"/>
        </exec>

        <echo message="Creating TreeAnnotator.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${TreeAnnotator_name}"
                   displayname="${TreeAnnotator_name}"
                   identifier="beast.app.treeannotator.TreeAnnotator"
                   icon="${common_dir}/icons/utility.icns"
                   shortversion="${version}"
                   copyright="${TreeAnnotator_name}, ${copyright}"
                   mainclassname="beast.app.treeannotator.TreeAnnotatorLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
        </bundleapp>
        <delete file="${Mac_package_dir}/TreeAnnotator.app/Contents/MacOS/JavaAppLauncher"/>
        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/TreeAnnotator.app/Contents/MacOS/"/>
        <chmod dir="${Mac_package_dir}/TreeAnnotator.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${TreeAnnotator_name}.app"/>
        </exec>

        <echo message="Creating DensiTree.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="DensiTree"
                   displayname="DensiTree"
                   identifier="viz.DensiTree"
                   icon="${tools_dir}/DensiTree.icns"
                   shortversion="2.0"
                   copyright="DensiTree, http://compevol.auckland.ac.nz/software/DensiTree/"
                   mainclassname="viz.DensiTree">
            <classpath file="${tools_dir}/DensiTree.jar"/>
            <option value="-Xmx4g"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
        </bundleapp>
        <delete file="${Mac_package_dir}/DensiTree.app/Contents/MacOS/JavaAppLauncher"/>
        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/DensiTree.app/Contents/MacOS/"/>
        <chmod dir="${Mac_package_dir}/DensiTree.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>

        <exec executable="codesign">
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/DensiTree.app"/>
        </exec>

        <echo message="Creating AppLauncher.app ..." />

        <bundleapp outputdirectory="${Mac_package_dir}"
                   name="${AppLauncher_name}"
                   displayname="${AppLauncher_name}"
                   identifier="beast.app.tools.AppLauncher"
                   icon="${common_dir}/icons/utility.icns"
                   shortversion="${version}"
                   copyright="${AppLauncher_name}, ${copyright}"
                   mainclassname="beast.app.tools.AppLauncherLauncher">
            <!--librarypath file="${dist}/beast.jar"/-->
            <classpath file="${Mac_package_dir}/lib/launcher.jar"/>
            <option value="-Xmx1024M"/>
            <option value="-Dapple.laf.useScreenMenuBar=true"/>
            <option value="-Djava.library.path=$JAVAROOT:/usr/local/lib"/>
            <option value="-Duser.language=en"/>            
        </bundleapp>
        <delete file="${Mac_package_dir}/AppLauncher.app/Contents/MacOS/JavaAppLauncher"/>
        <copy file="JavaAppLauncher" todir="${Mac_package_dir}/AppLauncher.app/Contents/MacOS/"/>
        <chmod dir="${Mac_package_dir}/AppLauncher.app/Contents/MacOS/" perm="755" includes="JavaAppLauncher"/>

        <exec executable="codesign">
            <arg value="--deep"/>
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_package_dir}/${AppLauncher_name}.app"/>
        </exec>

        <copy todir="${Mac_package_dir}/templates/">
            <fileset dir="templates/" />
        </copy>

        <echo message="Building disk image." />
        <exec executable='release/Mac/createdmg.sh'/>

        <exec executable="codesign">
            <arg value="-s"/>
            <arg value="${AppleSigner}"/>
            <arg value="-v"/>
            <arg value="${Mac_dir}/${BEAST_name} v${version}.dmg"/>
        </exec>

        <delete file="${Mac_dir}/pack.temp.dmg"/>
        
       <copy file="${Mac_dir}/${BEAST_name} v${version}.dmg" tofile="../../tmp/${BEAST_name}_with_JRE.v${version}.dmg" />


        <echo message="Mac with JRE version release is finished." />
    </target>




    <target name="doc" description="Create Developer Docs for Beast 2" depends='javadoc'>
        <copy file="doc/tutorial.slides.part1.pdf" tofile="release/common/doc/develop/" />
        <copy file="doc/tutorial.slides.part2.pdf" tofile="release/common/doc/develop/" />
        <!-- part 3 needs updating -->
        <!--copy file="doc/tutorial.slides.part3.pdf" tofile="release/common/doc/develop/" /-->
    </target>

    <target name="javadoc" description="Create Javadocs for Beast 2" depends='docPreProcess'>
        <mkdir dir="${common_dir}/javadoc/" />
        <javadoc destdir="${common_dir}/javadoc/">
            <fileset dir="src2/" includes="beast/**/*.java" />
            <!--<fileset dir="src2/" includes="beast/core/**/*.java" />-->
            <!--<fileset dir="src2/" includes="beast/util/**/*.java" />-->
            <!--<fileset dir="src2/" includes="beast/math/**/*.java" />-->
            <!--<fileset dir="src2/" includes="beast/evolution/**/*.java" />-->
        </javadoc>

        <!-- clean up -->
        <delete dir="src2/"/>
    </target>

    <!-- run perl script that extracts @Description and Input.description info for javadoc -->
    <target name="docPreProcess">
        <exec executable="perl" dir="${basedir}">
            <arg value="scripts/doc.pl" />
        </exec>
    </target>

    <property name="sdk_dir" value="${release_dir}/${BEAST_name}_SDK" />

    <!-- zip up everything that goes in the SDK -->
    <target name="sdk" description="Create Beast 2 SDK" depends="dist_all_BEAST,javadoc">

        <delete file="${release_dir}/${BEAST_name}_v${version}_SDK.zip" />

        <copy file="doc/slides/sdk.pdf" tofile="${common_dir}/Beast_2_Getting_Started.pdf" />

        <zip destfile="${release_dir}/${BEAST_name}_v${version}_SDK.zip">
            <fileset dir="${common_dir}">
                <include name="**/*.txt" />
                <include name="**/*.pdf" />
                <include name="javadoc/**/*.*" />
            </fileset>
            <fileset dir="${dist}">
                <include name="beast.jar" />
                <include name="beast.src.jar" />
            </fileset>
        </zip>

        <!-- clean up -->
        <delete file="${common_dir}/Beast_2_Getting_Started.pdf" />

        <echo message="SDK release is finished." />
    </target>

</project>

